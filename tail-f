#!/usr/bin/ruby

# Copyright (C) 2013 Tanaka Akira  <akr@fsij.org>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above
#     copyright notice, this list of conditions and the following
#     disclaimer in the documentation and/or other materials provided
#     with the distribution.
#  3. The name of the author may not be used to endorse or promote
#     products derived from this software without specific prior
#     written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
# GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# usage:
#  tail-f [options] file...
#
# feature:
# - Support multiple files
# - Escape control characters.
# - Show timestamps for events such as file found/removal.

require 'optparse'

$opt_t = false
$opt_first_lines = 10

def optionparser
  o = OptionParser.new
  o.def_option('-h', 'show this message') { puts o; exit }
  o.def_option('-t', 'show time') { $opt_t = true }
  o.def_option('--first-lines=NUM', 'number of lines to show at first') {|arg| $opt_first_lines = arg.to_i }
  o
end

class Follower
  def initialize(filename, out)
    @filename = filename
    @out = out
    @io = nil
    @first = true
  end

  def check_existence
    begin
      File.stat(@filename)
    rescue Errno::ENOENT
      @out.notice(@filename, "not found.")
      return nil
    end
  end

  LAST_BLOCK_BYTES = 4096

  def show_last_lines
    size = @io.stat.size
    return if size == 0
    num_newlines = 0
    pos = size
    while 0 < pos && num_newlines <= $opt_first_lines
      if pos % LAST_BLOCK_BYTES == 0
        block_len = LAST_BLOCK_BYTES
      else
        block_len = pos % LAST_BLOCK_BYTES
      end
      pos -= block_len
      @io.seek(pos)
      block = @io.read(block_len)
      num_newlines += block.count("\n")
    end
    @io.seek(pos)
    @io.gets if pos != 0 # skip a partial line.
    data = @io.read
    lines = []
    data.each_line {|line|
      lines << line
    }
    if $opt_first_lines < lines.length
      lines = lines[-$opt_first_lines, $opt_first_lines]
    end
    lines.each {|line|
      @out.output(@filename, line)
    }
  end

  def show_rest_lines
    @io.seek(0, IO::SEEK_CUR)
    data = @io.read
    return if !data || data.empty?
    data.each_line {|line|
      @out.output(@filename, line)
    }
  end

  def check
    if @io
      if !FileTest.identical?(@io, @filename)
        show_rest_lines
        @io.close
        @io = nil
        @out.notice(@filename, "removed.")
      elsif @io.stat.size < @io.pos
        @io.rewind
        @out.notice(@filename, "shrinked.")
      end
    end
    if !@io
      begin
        @io = open(@filename, 'rb')
      rescue Errno::ENOENT
        return
      end
      @out.notice(@filename, "found.")
      if @first
        show_last_lines
      end
    end
    show_rest_lines
  ensure
    @first = false
  end
end

class Output
  def initialize
    @last_filename = nil
    @at_beginning_of_line = true
  end

  def move_to_bol
    return if @at_beginning_of_line
    puts
    STDOUT.flush
    @at_beginning_of_line = true
  end

  def prefix(filename)
    if $opt_t
      now = Time.now.strftime("%F %T")
      "#{now} ==> #{filename} <=="
    else
      "==> #{filename} <=="
    end
  end

  def escape(str)
    str.gsub(/[\x00-\x07\x0b-\x1f\x7f]/) {
      "<" + $&.unpack("H*")[0] + ">"
    }
  end

  def notice(filename, mesg)
    move_to_bol
    puts "#{prefix filename} #{mesg}"
    STDOUT.flush
    @last_filename = filename
    @at_beginning_of_line = true
  end

  def output(filename, data)
    return if data.empty?
    if @last_filename != filename
      move_to_bol
      puts "#{prefix filename}"
      @last_filename = filename
    end
    edata = escape(data)
    print edata
    STDOUT.flush
    @at_beginning_of_line = /\n\z/ =~ edata ? true : false
  end
end

def main(argv)
  o = optionparser
  o.parse!(argv)
  out = Output.new
  followers = argv.map {|arg|
    Follower.new(arg, out)
  }
  list = []
  followers.each_with_index {|follower, i|
    list << [follower, follower.check_existence, i]
  }
  list = list.sort_by {|follower, st, i|
    [st ? st.mtime.to_f : 1.0/0.0, i]
  }
  followers = list.map {|follower, st, i| follower }
  while true
    followers.each {|follower|
      follower.check
    }
    sleep 1
  end
end

main(ARGV)
